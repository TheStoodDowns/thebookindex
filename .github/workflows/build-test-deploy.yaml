name: deploy-on-aws
on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
    types: [closed]
jobs:
  build-test-web:
    runs-on: ubuntu-latest
    env:
        working-directory: ./TheBookIndex.Web
    strategy:
      matrix:
        node-version: [10.x]
    steps:
      - uses: actions/checkout@master
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install Dependencies
        run: npm install
        working-directory: ${{env.working-directory}}
      - name: Run Unit Tests
        run: npm run test -- --no-watch --no-progress --browsers=ChromeHeadlessCI
        working-directory: ${{env.working-directory}}
      - name: Run E2E Tests
        run: npm rum e2e -- --protractor-config=e2e/protractor-ci.conf.js
        working-directory: ${{env.working-directory}}
      - name: Build Application
        run: npm run buildprod
        working-directory: ${{env.working-directory}}
      - name: Store Build as artifact
        uses: actions/upload-artifact@v2
        with:
          name: web-build-artifact
          path: ${{env.working-directory}}/dist/TheBookIndex

  build-test-api:
    runs-on: windows-latest
    env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: "ap-southeast-2"
    strategy:
      matrix:
        dotnet-version: [3.1.x]
    steps:
      - uses: actions/checkout@master
      - name: Setup .Net Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ matrix.dotnet-version }}
      - name: Run api Tests
        run: dotnet test
      - name: Build api
        run: dotnet build --configuration Release
      - name: Store Build as artifact
        uses: actions/upload-artifact@v2
        with:
          name: api-build-artifact
          path: TheBookIndex.Api\obj\Release\netcoreapp3.1

  deploy-api:
    needs: [build-test-web, build-test-api]
    runs-on: ubuntu-latest
    env:
        working-directory: ./TheBookIndex.Api
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: "ap-southeast-2"
    steps:
      - uses: actions/checkout@master
      - name: Retreive Api Artifact
        uses: actions/download-artifact@v2
        with:
          name: api-build-artifact
          path: ${{env.working-directory}}/obj/Release/netcoreapp3.1
      - name: Install Amazon.Lambda.Tools
        run: dotnet tool install -g Amazon.Lambda.Tools
        working-directory: ${{env.working-directory}}
      - name: Deploy Serverless stack for api
        run: dotnet lambda deploy-serverless
        working-directory: ${{env.working-directory}}

  deploy-web:
    needs: [build-test-web, build-test-api, deploy-api]
    runs-on: ubuntu-latest
    env:
        working-directory: ./TheBookIndex.Web
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: "ap-southeast-2"
        cloudfront_distribution_id: E31RQP1ZIRASNT
    steps:
      - uses: actions/checkout@master
      - uses: actions/download-artifact@v2
        with:
          name: web-build-artifact
          path: ${{env.working-directory}}/dist/TheBookIndex
      # - name: install Serverless Framework
      #   run: npm install serverless
      #   working-directory: ${{env.working-directory}}
      - name: Deploy Serverless stack for website
        run: npm install serverless | serverless deploy --region ${{env.AWS_REGION}}
        working-directory: ${{env.working-directory}}
      - name: Sync To AWS S3 Bucket
        run: aws s3 sync dist/TheBookIndex s3://thebookindex-angular-web-app
        working-directory: ${{env.working-directory}}
      - name: Invalidate Cloudfront Distribution
        run: aws cloudfront create-invalidation --distribution-id ${{env.cloudfront_distribution_id}} --paths "/" "/*"
        working-directory: ${{env.working-directory}}

